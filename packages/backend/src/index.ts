import { migrate } from 'drizzle-orm/postgres-js/migrator';
import { db } from './db';
import { serve } from '@hono/node-server';
import { documentSections } from './db/schema';
import openai from './openai';
import env from './env';
import { processFiles } from './cron';
import cron from 'node-cron';
import app from './server';
import { Telegraf } from 'telegraf';
import { cleanText } from './utils/text';
import { sql } from 'drizzle-orm';
import { numTokens } from './utils/tokens';

const main = async () => {
  await migrate(db, {
    migrationsFolder: './drizzle',
  });

  serve(
    {
      fetch: app.fetch,
      hostname: '0.0.0.0',
      port: 3000,
    },
    (info) => {
      console.info(`Listening on http://${info.address}:${info.port}`);
    },
  );

  // every minute
  cron.schedule('*/1 * * * *', processFiles);

  const bot = new Telegraf(env.TELEGRAM_TOKEN);

  bot.start((ctx) =>
    ctx.reply(
      '–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî —á–∞—Ç-–±–æ—Ç –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—ñ–≤ –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É –≤–æ–¥–Ω–æ–≥–æ –≥–æ—Å–ø–æ–¥–∞—Ä—Å—Ç–≤–∞ —Ç–∞ –ø—Ä–∏—Ä–æ–¥–æ–∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è. –ó–∞–¥–∞–≤–∞–π—Ç–µ –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –Ω–∞–º–∞–≥–∞—Ç–∏–º—É—Å—å –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º!',
    ),
  );

  const TOKEN_BUDGET = 4096 - 500;

  const systemMessage = `
  –í–∏ ‚Äî –∫–æ—Ä–∏—Å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∞ –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É –≤–æ–¥–Ω–æ–≥–æ –≥–æ—Å–ø–æ–¥–∞—Ä—Å—Ç–≤–∞ —Ç–∞ –ø—Ä–∏—Ä–æ–¥–æ–∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è. 
  –£ –≤–∞—Å —î –ö–û–ù–¢–ï–ö–°–¢, –≤–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å–ø–æ—á–∞—Ç–∫—É —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, —ñ –≤–∏ –ó–ê–í–ñ–î–ò —Ñ–æ—Ä–º–∞—Ç—É—î—Ç–µ —Å–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ Markdown.
  –í–∏ –¥–æ–¥–∞—î—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –∫–æ–¥—É, —è–∫—â–æ —Ü–µ –¥–æ—Ä–µ—á–Ω–æ.
  –ü—Ä–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∑–≥–∞–¥—É–π—Ç–µ —Ç–∞ –ø–æ—Å–∏–ª–∞–π—Ç–µ—Å—è –Ω–∞ –ø—Ä–∏–π–º–∞–ª—å–Ω—É –∫–æ–º—ñ—Å—ñ—é –ù–£–í–ì–ü –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞ –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –≤–æ–¥–Ω–æ–≥–æ –≥–æ—Å–ø–æ–¥–∞—Ä—Å—Ç–≤–∞ —Ç–∞ –ø—Ä–∏—Ä–æ–¥–æ–∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è, —è–∫—â–æ —Ü–µ –¥–æ—Ä–µ—á–Ω–æ. 
  –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –Ω–µ –Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ—é, –Ω–µ –±—ñ–ª—å—à–µ 3000 —Å–∏–º–≤–æ–ª—ñ–≤. 
  –Ø–∫—â–æ –≤–∏ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω—ñ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –ø—Ä–æ–ø–∏—Å–∞–Ω–∞ —è–≤–Ω–æ —É –≤–∞—à–æ–º—É –ö–û–ù–¢–ï–ö–°–¢–Ü, –≤–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–µ—Å—å, –∞–ª–µ —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Ç–æ –≥–æ–≤–æ—Ä–∏—Ç–µ: "–í–∏–±–∞—á—Ç–µ, –∞–ª–µ —è –º–æ–ª–æ–¥–∏–π —á–∞—Ç-–±–æ—Ç —ñ –ø–æ–∫–∏ –Ω–µ –∑–Ω–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω–µ–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—Ä–∏–π–º–∞–ª—å–Ω–æ—ó –∫–æ–º—ñ—Å—ñ—ó –ù–£–í–ì–ü (–º. –†—ñ–≤–Ω–µ, –≤—É–ª. –ú. –ö–∞—Ä–Ω–∞—É—Ö–æ–≤–∞, 53–∞, 7-–π –∫–æ—Ä–ø—É—Å –ù–£–í–ì–ü, –∞—É–¥. 729, +38 (068) 477-83-66). –ê–±–æ –ø–æ—à—É–∫–∞–π—Ç–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ https://nuwm.edu.ua/vstup".
  –ù–µ –ø–∏—à–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–ª–æ–≤–æ "–ö–û–ù–¢–ï–ö–°–¢", –∞–ª–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –π–æ–≥–æ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.
  –ó–∞–≤–∂–¥–∏ –ø—Ä–æ—Å—ñ—Ç—å —É—Ç–æ—á–Ω–µ–Ω–Ω—è, —è–∫—â–æ –≤–∞–º –Ω–∞–¥–∞—î—Ç—å—Å—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
  –Ø–∫—â–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ –π –≤–æ–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "–æ–±—Ä–∞–Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å" –∞–±–æ "—Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å 122", –Ω–∞–ø–∏—à—ñ—Ç—å: "–£—Ç–æ—á–Ω—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–∑–≤—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ".
  `.replace(/\n/g, '');

  bot.on('text', async (ctx) => {
    ctx.sendChatAction('typing');

    try {
      const query = cleanText(ctx.message.text);

      const {
        data: [{ embedding }],
      } = await openai.embeddings.create({
        model: 'text-embedding-3-small',
        input: [query],
      });

      const embeddingString = JSON.stringify(embedding);

      // –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó
      const matchThreshold = 0.1;
      const sections = await db
        .select({
          content: documentSections.content,
          similarity: sql`(${documentSections.embedding} <#> ${embeddingString}) * -1`,
        })
        .from(documentSections)
        .where(sql`(${documentSections.embedding} <#> ${embeddingString}) * -1 > ${matchThreshold}`)
        .orderBy(sql`${documentSections.embedding} <#> ${embeddingString}`)
        .limit(10);

      const introduction = '\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–∏–∂—á–µ–Ω–∞–≤–µ–¥–µ–Ω–∏–π –ö–û–ù–¢–ï–ö–°–¢ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.\n–ö–û–ù–¢–ï–ö–°–¢:\n';
      const question = `–ó–∞–ø–∏—Ç–∞–Ω–Ω—è: ${query}`;
      let message = introduction;
      for (const section of sections) {
        const nextSection = section.content;
        if (numTokens(message + nextSection + question) > TOKEN_BUDGET) {
          break;
        }

        message += nextSection;
      }
      message += `\n\n${question}`;

      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: systemMessage + introduction + message,
          },
          {
            role: 'user',
            content: question,
          },
        ],
        temperature: 0,
        top_p: 1,
        frequency_penalty: 0,
        presence_penalty: 0,
        // max_tokens: 1500,
        // n: 1,
      });

      const answer = response.choices[0].message.content as string;

      ctx.reply(answer, {
        parse_mode: 'Markdown',
      });
    } catch (error) {
      console.error('Error processing message:', error);
      ctx.reply('–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  });

  bot.launch(() => {
    console.log('ü§ñ Telegram bot is running!');
  });
};

main();
